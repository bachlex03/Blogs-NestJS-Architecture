generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String 
  name      String?
  roles      Role[] @default([USER])
  profile   Profile?
  token     Token?
  blogs Blog[] 
  comments Comment[]
}

model Token {
  id Int @id @default(autoincrement())
  refreshTokenUsed String[]
  refreshToken String
  accessToken String
  user User @relation(fields: [userId], references: [id])
  userId String @unique
   
}

model Profile {
  id Int @id @default(autoincrement())
  phoneNumber String?
  isActive Boolean @default(true)
  createAt  DateTime? @default(now())
  updatedAt DateTime?  @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  
}

model Blog {
  id Int @id @default(autoincrement())
  title String
  content String @db.Text
  status Status @default(PENDING_APPROVAL)
  createAt  DateTime? @default(now())
  updatedAt DateTime?  @updatedAt
  author User @relation(fields: [authorId], references: [id])
  authorId String 
  comments CommentsOnBlogs[] @relation(name: "blog_comment")
}




model Comment {
  id Int @id @default(autoincrement())
  content String
  createAt  DateTime? @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  blogs CommentsOnBlogs[] 
}

model CommentsOnBlogs {
  blog Blog @relation(name: "blog_comment" ,fields: [blogId], references: [id], onDelete: Cascade)
  blogId Int
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id([blogId, commentId])
}


enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING_APPROVAL
  APPROVED
  PENDING_DELETION
  DELETED
}