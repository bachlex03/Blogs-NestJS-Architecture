generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String @id @default(uuid())
  email                 String @unique
  password              String 
  username              String?
  roles                 Role[] @default([USER])
  profile               Profile? @relation("user_profile")
  token                 Token? @relation("user_token")
  blogs                 Blog[] @relation("user_blogs")
  comments              Comment[] @relation("user_comments")
}

model Token {
  id                    Int @id @default(autoincrement())
  refreshTokenUsed      String[]
  refreshToken          String
  accessToken           String
  user User             @relation(name: "user_token", fields: [userId], references: [id], onDelete: Cascade)
  userId String         @unique
   
}

model Profile {
  id Int                @id @default(autoincrement())
  firstName             String?
  lastName              String?
  phoneNumber           String?
  socialMedia           String?
  isActive              Boolean @default(true)
  createAt              DateTime? @default(now())
  updatedAt             DateTime?  @updatedAt
  user User             @relation(name: "user_profile", fields: [userId], references: [id], onDelete: Cascade)
  userId                String @unique
  
}

model Blog {
  id                    Int @id @default(autoincrement())
  title                 String
  content               String @db.Text
  status                Status @default(PENDING_APPROVAL)
  createAt              DateTime? @default(now())
  updatedAt             DateTime?  @updatedAt
  author                User @relation(name: "user_blogs",fields: [authorId], references: [id], onDelete: Cascade)
  authorId              String 
  comments              CommentsOnBlogs[] @relation(name: "blog_comment")
}




model Comment {
  id                    Int @id @default(autoincrement())
  parentId              Int 
  content               String
  createAt              DateTime? @default(now())
  author                User @relation(name: "user_comments", fields: [authorId], references: [id], onDelete: Cascade)
  authorId              String
  blogs                 CommentsOnBlogs[] 
}

model CommentsOnBlogs {
  blog                  Blog @relation(name: "blog_comment" ,fields: [blogId], references: [id], onDelete: Cascade)
  blogId                Int
  comment               Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId             Int

  @@id([blogId, commentId])
}


enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING_APPROVAL
  APPROVED
  PENDING_DELETION
  DELETED
}