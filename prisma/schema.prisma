// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String 
  name      String?
  role      Role[] @default([USER])
  profile   Profile?
  token     Token?
}

model Token {
  id Int @id @default(autoincrement())
  refreshTokenUsed String[]
  refreshToken String
  accessToken String
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Profile {
  id Int @id @default(autoincrement())
  phoneNumber String?
  isActive Boolean @default(true)
  createAt  DateTime? @default(now())
  updatedAt DateTime?  @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  comments Comment[]
  blogs Blog[]
}

model Blog {
  id Int @id @default(autoincrement())
  title String
  content String @db.Text
  status Status @default(PENDDING_APPROVAL)
  createAt  DateTime? @default(now())
  updatedAt DateTime?  @updatedAt
  author Profile @relation(fields: [authorId], references: [id])
  authorId Int
  comments CommentsOnBlogs[]
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  createAt  DateTime? @default(now())
  author Profile @relation(fields: [authorId], references: [id])
  authorId Int
  blogs CommentsOnBlogs[]
}

model CommentsOnBlogs {
  blog Blog @relation(fields: [blogId], references: [id])
  blogId Int
  comment Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([blogId, commentId])
}


enum Role {
  ADMIN
  USER
}

enum Status {
  PENDDING_APPROVAL
  PENDDING_DELETION
}